#!/usr/bin/php
<?php

/**
 * Based on https://github.com/robdevops/check_php-fpm/tree/master
 *
 * Returns php-fpm health and performance data on https://the-host/fpm-status
 *
 * Somewhat hardcoded to our default configuration, which is to expose
 * fpm-status on https for localhost and some specific IPs only (long story,
 * a bit of legacy, that is how we setup servers).
 *
 * vim: syntax=php
 */

$return_text_extended = "";
$perfdata = "";

// args
$connect = NULL;
$shortopts = 'h:p:S:';
$longopts = ['host:', 'port:', 'secure:', 'help'];
$options = getopt($shortopts, $longopts);

if (isset($options['h']) || isset($options['host']) ) {
  $connect = 'https://' . $options['h'] ?? $options['host'];
}

if (empty($connect) || isset($options['help'])) {
  $me = basename(__FILE__);
  echo "Usage: $me [--host <address>]\n";
  exit(3);
}

// Fetch fpm-status data as JSON
$options = [
  "http" => [
    "header" => "Accept: application/json\r\n"
  ]
];
$context = stream_context_create($options);
$output = file_get_contents("$connect/fpm-status?json&full", false, $context);

// Parse the JSON
$decoded = json_decode($output, true);
if (json_last_error() !== JSON_ERROR_NONE) {
  echo "Could not parse JSON: $output";
  exit(3);
}

// Index the values
foreach($decoded as $key => $value) {
  // Ex: ignore "processes"
  if (is_array($value)) {
    continue;
  }
  $newkey = str_replace(" ", "_", $key);
  $index[$newkey] = $value;
}

// calculate perfdata percentages
if ($index['listen_queue'] != 0) {
  $index["queue_capacity"] = intval($index['listen_queue']) * 100 / intval($index['listen_queue_len']) . "%";
} else {
  $index["queue_capacity"] = 0 . "%";
}

if ($index['active_processes'] != 0) {
  $index["process_capacity"] = intval($index['active_processes']) * 100 / intval($index['total_processes']) . "%";
} else {
  $index["process_capacity"] = 0 . "%";
}

// Build performance data string
foreach ($index as $key => $value) {
  if (is_numeric(str_replace('%', '', "$value"))) {
    $perfdata = $perfdata . "$key=$value; ";
  }
}

// Snapshot request performance (not highly accurate, since we sample "processes" every 15 mins)
$process_stats = [
  'request duration',
  'last request cpu',
  'last request memory',
];
foreach ($process_stats as $stat) {
  $durations = array_column($decoded['processes'], $stat);
  $average = array_sum($durations) / count($durations);
  // Ex: key becomes: "avg_request_duration"
  $newkey = 'avg_' . str_replace(' ', '_', $stat);
  $perfdata .= "$newkey=$average; ";
}

// output
if($index['start_since'] > 0) {
  $human_date = date('r', $index['start_time']);
  if (str_replace('%', '', $index['queue_capacity']) >= 80) {
    $return_status = 1;
    $return_text = 'WARN: ';
    $return_text_extended = "queue capacity at " . $index['queue_capacity'] . " (" . $index['listen_queue'] . "/" . $index['listen_queue_len'] . "). Peak since $human_date was " . $index['max_listen_queue'] . "/" . $index['listen_queue_len'] . " | " . $perfdata;

  }
  elseif (str_replace('%', '', $index['process_capacity']) >= 80) {
    $return_status = 1;
    $return_text = 'WARN: ';
    $return_text_extended = "processes capacity at " . $index['process_capacity'] . " (" . $index['active_processes'] . "/" . $index['total_processes'] . "). Peak since $human_date was " . $index['max_active_processes'] . "/" . $index['total_processes'] . " | " . $perfdata;
  }
  else {
    $return_status = 0;
    $return_text = 'OK: ';
    $return_text_extended = "served " . $index['accepted_conn'] . " connections with " . $index['slow_requests'] . " slow requests since $human_date. | " . $perfdata;
  }
}
else {
  $return_status = 2;
  $outputhead = rtrim(strtok($output[0], "\n")); // first line of original output
  $return_text = 'CRITICAL: ' ;
  if( strlen($outputhead) ) {
    $return_text_extended = "$outputhead";
  }
}

fwrite(STDOUT, $return_text.$return_text_extended.PHP_EOL);
exit($return_status);
